<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.21 (Ruby 3.1.6) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="none" docName="authorization-api-1_0" category="std" consensus="true" submissionType="IETF" xml:lang="en">
  <front>
    <title abbrev="azapi">Authorization API 1.0 â€“ draft 02</title>

    <author initials="O." surname="Gazitt" fullname="Omri Gazitt" role="editor">
      <organization>Aserto</organization>
      <address>
        <email>omri@aserto.com</email>
      </address>
    </author>
    <author initials="D." surname="Brossard" fullname="David Brossard" role="editor">
      <organization>Axiomatics</organization>
      <address>
        <email>david.brossard@axiomatics.com</email>
      </address>
    </author>
    <author initials="A." surname="Tulshibagwale" fullname="Atul Tulshibagwale" role="editor">
      <organization>SGNL</organization>
      <address>
        <email>atul@sgnl.ai</email>
      </address>
    </author>

    <date year="2025" month="January" day="23"/>

    
    <workgroup>OpenID AuthZEN</workgroup>
    <keyword>Authorization</keyword> <keyword>Access Management</keyword> <keyword>XACML</keyword> <keyword>OPA</keyword> <keyword>Topaz</keyword> <keyword>Cedar</keyword> <keyword>PDP</keyword> <keyword>PEP</keyword> <keyword>ALFA</keyword>

    <abstract>


<?line 69?>

<t>The Authorization API enables Policy Decision Points (PDPs) and Policy Enforcement Points (PEPs) to communicate authorization requests and decisions to each other without requiring knowledge of each other's inner workings. The Authorization API is served by the PDP and is called by the PEP. The Authorization API includes an Evaluation endpoint, which provides specific access decisions. Other endpoints may be added in the future for other scenarios, including searching for subjects or resources.</t>



    </abstract>



  </front>

  <middle>


<?line 73?>

<section anchor="introduction"><name>Introduction</name>
<t>Computational services often implement access control within their components by separating Policy Decision Points (PDPs) from Policy Enforcement Points (PEPs). PDPs and PEPs are defined in XACML (<xref target="XACML"/>) and NIST's ABAC SP 800-162. Communication between PDPs and PEPs follows similar patterns across different software and services that require or provide authorization information. The Authorization API described in this document enables different providers to offer PDP and PEP capabilities without having to bind themselves to one particular implementation of a PDP or PEP.</t>

</section>
<section anchor="model"><name>Model</name>
<t>The Authorization API is a transport-agnostic API published by the PDP, to which the PEP acts as a client. Possible bindings of this specification, such as HTTPS or gRPC, are described in Transport (<xref target="transport"/>).</t>

<t>Authorization for the Authorization API itself is out of scope for this document, since authorization for APIs is well-documented elsewhere. For example, the Authorization API's HTTPS binding MAY support authorization using an <spanx style="verb">Authorization</spanx> header, using a <spanx style="verb">basic</spanx> or <spanx style="verb">bearer</spanx> token. Support for OAuth 2.0 (<xref target="RFC6749"/>) is RECOMMENDED.</t>

</section>
<section anchor="features"><name>Features</name>
<t>The core feature of the Authorization API is the Access Evaluation API, which enables a PEP to find out if a specific request can be permitted to access a specific resource. The following are non-normative examples:</t>

<t><list style="symbols">
  <t>Can Alice view document #123?</t>
  <t>Can Alice view document #123 at 16:30 on Tuesday, June 11, 2024?</t>
  <t>Can a manager print?</t>
</list></t>

</section>
<section anchor="api-version"><name>API Version</name>
<t>This document describes the API version 1.0. Any updates to this API through subsequent revisions of this document or other documents MAY augment this API, but MUST NOT modify the API described here. Augmentation MAY include additional API methods or additional parameters to existing API methods, additional authorization mechanisms, or additional optional headers in API requests. All API methods for version 1.0 MUST be immediately preceded by the relative URL path <spanx style="verb">/v1/</spanx>.</t>

</section>
<section anchor="information-model"><name>Information Model</name>
<t>The information model for requests and responses include the following entities: Subject, Action, Resource, Context, and Decision. These are all defined below.</t>

<section anchor="subject"><name>Subject</name>
<t>A Subject is the user or robotic principal about whom the Authorization API is being invoked. The Subject may be requesting access at the time the Authorization API is invoked.</t>

<t>A Subject is a JSON (<xref target="RFC8259"/>) object that contains two REQUIRED keys, <spanx style="verb">type</spanx> and <spanx style="verb">id</spanx>, which have a value typed <spanx style="verb">string</spanx>, and an OPTIONAL key, <spanx style="verb">properties</spanx>, with a value of a JSON object.</t>

<dl>
  <dt><spanx style="verb">type</spanx>:</dt>
  <dd>
    <t>REQUIRED. A <spanx style="verb">string</spanx> value that specifies the type of the Subject.</t>
  </dd>
  <dt><spanx style="verb">id</spanx>:</dt>
  <dd>
    <t>REQUIRED. A <spanx style="verb">string</spanx> value containing the unique identifier of the Subject, scoped to the <spanx style="verb">type</spanx>.</t>
  </dd>
  <dt><spanx style="verb">properties</spanx>:</dt>
  <dd>
    <t>OPTIONAL. A JSON object containing any number of key-value pairs, which can be used to express additional properties of a Subject.</t>
  </dd>
</dl>

<t>The following is a non-normative example of a Subject:</t>

<figure title="Example Subject" anchor="subject-example"><sourcecode type="json"><![CDATA[
{
  "type": "user",
  "id": "alice@acmecorp.com"
}
]]></sourcecode></figure>

<section anchor="subject-properties"><name>Subject Properties</name>
<t>Many authorization systems are stateless, and expect the client (PEP) to pass in any properties or attributes that are expected to be used in the evaluation of the authorization policy. To satisfy this requirement, Subjects MAY include zero or more additional attributes as key-value pairs, under the <spanx style="verb">properties</spanx> object.</t>

<t>An attribute can be single-valued or multi-valued. It can be a primitive type (string, boolean, number) or a complex type such as a JSON object or JSON array.</t>

<t>The following is a non-normative example of a Subject which adds a string-valued <spanx style="verb">department</spanx> property:</t>

<figure title="Example Subject with Additional Property" anchor="subject-department-example"><sourcecode type="json"><![CDATA[
{
  "type": "user",
  "id": "alice@acmecorp.com",
  "properties": {
    "department": "Sales"
  }
}
]]></sourcecode></figure>

<t>To increase interoperability, a few common properties are specified below:</t>

<section anchor="subject-ip-address"><name>IP Address</name>
<t>The IP Address of the Subject, identified by an <spanx style="verb">ip_address</spanx> field, whose value is a textual representation of an IP Address, as defined in <spanx style="verb">Textual Conventions for Internet Network Addresses</spanx> <xref target="RFC4001"/>.</t>

<t>The following is a non-normative example of a subject which adds the <spanx style="verb">ip_address</spanx> property:</t>

<figure title="Example Subject with IP Address" anchor="subject-ip-address-example"><sourcecode type="json"><![CDATA[
{
  "type": "user",
  "id": "alice@acmecorp.com",
  "properties": {
    "department": "Sales",
    "ip_address": "172.217.22.14"
  }
}
]]></sourcecode></figure>

</section>
<section anchor="subject-device-id"><name>Device ID</name>
<t>The Device Identifier of the Subject, identified by a <spanx style="verb">device_id</spanx> field, whose value is a string representation of the device identifier.</t>

<t>The following is a non-normative example of a subject which adds the <spanx style="verb">device_id</spanx> property:</t>

<figure title="Example Subject with Device ID" anchor="subject-device-id-example"><sourcecode type="json"><![CDATA[
{
  "type": "user",
  "id": "alice@acmecorp.com",
  "properties": {
    "department": "Sales",
    "ip_address": "172.217.22.14",
    "device_id": "8:65:ee:17:7e:0b"
  }
}
]]></sourcecode></figure>

</section>
</section>
</section>
<section anchor="resource"><name>Resource</name>
<t>A Resource is the target of an access request. It is a JSON (<xref target="RFC8259"/>) object that is constructed similar to a Subject entity. It has the follow keys:</t>

<dl>
  <dt><spanx style="verb">type</spanx>:</dt>
  <dd>
    <t>REQUIRED. A <spanx style="verb">string</spanx> value that specifies the type of the Resource.</t>
  </dd>
  <dt><spanx style="verb">id</spanx>:</dt>
  <dd>
    <t>REQUIRED. A <spanx style="verb">string</spanx> value containing the unique identifier of the Resource, scoped to the <spanx style="verb">type</spanx>.</t>
  </dd>
  <dt><spanx style="verb">properties</spanx>:</dt>
  <dd>
    <t>OPTIONAL. A JSON object containing any number of key-value pairs, which can be used to express additional properties of a Resource.</t>
  </dd>
</dl>

<section anchor="examples-non-normative"><name>Examples (non-normative)</name>

<t>The following is a non-normative example of a Resource with a <spanx style="verb">type</spanx> and a simple <spanx style="verb">id</spanx>:</t>

<figure title="Example Resource" anchor="resource-example"><sourcecode type="json"><![CDATA[
{
  "type": "book",
  "id": "123"
}
]]></sourcecode></figure>

<t>The following is a non-normative example of a Resource containing a <spanx style="verb">library_record</spanx> property, that is itself a JSON object:</t>

<figure title="Example Resource with Additional Property" anchor="resource-example-structured"><sourcecode type="json"><![CDATA[
{
  "type": "book",
  "id": "123",
  "properties": {
    "library_record":{
      "title": "AuthZEN in Action",
      "isbn": "978-0593383322"
    }
  }
}
]]></sourcecode></figure>

</section>
</section>
<section anchor="action"><name>Action</name>
<t>An Action is the type of access that the requester intends to perform.</t>

<t>Action is a JSON (<xref target="RFC8259"/>) object that contains a REQUIRED <spanx style="verb">name</spanx> key with a <spanx style="verb">string</spanx> value, and an OPTIONAL <spanx style="verb">properties</spanx> key with a JSON object value.</t>

<dl>
  <dt><spanx style="verb">name</spanx>:</dt>
  <dd>
    <t>REQUIRED. The name of the Action.</t>
  </dd>
  <dt><spanx style="verb">properties</spanx>:</dt>
  <dd>
    <t>OPTIONAL. A JSON object containing any number of key-value pairs, which can be used to express additional properties of an Action.</t>
  </dd>
</dl>

<t>The following is a non-normative example of an action:</t>

<figure title="Example Action" anchor="action-example"><sourcecode type="json"><![CDATA[
{
  "name": "can_read"
}
]]></sourcecode></figure>

</section>
<section anchor="context"><name>Context</name>
<t>The Context object is a set of attributes that represent environmental or contextual data about the request such as time of day. It is a JSON (<xref target="RFC8259"/>) object.</t>

<t>The following is a non-normative example of a Context:</t>

<figure title="Example Context" anchor="context-example"><sourcecode type="json"><![CDATA[
{
  "time": "1985-10-26T01:22-07:00"
}
]]></sourcecode></figure>

</section>
</section>
<section anchor="access-evaluation-api"><name>Access Evaluation API</name>

<t>The Access Evaluation API defines the message exchange pattern between a client (PEP) and an authorization service (PDP) for executing a single access evaluation.</t>

<section anchor="access-evaluation-request"><name>The Access Evaluation API Request</name>
<t>The Access Evaluation request is a 4-tuple constructed of the four previously defined entities:</t>

<dl>
  <dt><spanx style="verb">subject</spanx>:</dt>
  <dd>
    <t>REQUIRED. The subject (or principal) of type Subject</t>
  </dd>
  <dt><spanx style="verb">action</spanx>:</dt>
  <dd>
    <t>REQUIRED. The action (or verb) of type Action.</t>
  </dd>
  <dt><spanx style="verb">resource</spanx>:</dt>
  <dd>
    <t>REQUIRED. The resource of type Resource.</t>
  </dd>
  <dt><spanx style="verb">context</spanx>:</dt>
  <dd>
    <t>OPTIONAL. The context (or environment) of type Context.</t>
  </dd>
</dl>

<section anchor="example-non-normative"><name>Example (non-normative)</name>

<figure title="Example Request" anchor="request-example"><sourcecode type="json"><![CDATA[
{
  "subject": {
    "type": "user",
    "id": "alice@acmecorp.com"
  },
  "resource": {
    "type": "account",
    "id": "123"
  },
  "action": {
    "name": "can_read",
    "properties": {
      "method": "GET"
    }
  },
  "context": {
    "time": "1985-10-26T01:22-07:00"
  }
}
]]></sourcecode></figure>

</section>
</section>
<section anchor="access-evaluation-response"><name>The Access Evaluation API Response</name>
<t>The simplest form of a response is simply a boolean representing a Decision, indicated by a <spanx style="verb">"decision"</spanx> field.</t>

<dl>
  <dt><spanx style="verb">decision</spanx>:</dt>
  <dd>
    <t>REQUIRED. A boolean value that specifies whether the Decision is to allow or deny the operation.</t>
  </dd>
</dl>

<t>In this specification, assuming the evaluation was successful, there are only 2 possible responses:</t>

<t><list style="symbols">
  <t><spanx style="verb">true</spanx>: The access request is permitted to go forward.</t>
  <t><spanx style="verb">false</spanx>: The access request is denied and MUST NOT be permitted to go forward.</t>
</list></t>

<t>The response object MUST contain this boolean-valued Decision key.</t>

<section anchor="decision"><name>Access Evaluation Decision</name>
<t>The following is a non-normative example of a simple Decision:</t>

<figure title="Example Decision" anchor="decision-example"><sourcecode type="json"><![CDATA[
{
  "decision": true
}
]]></sourcecode></figure>

</section>
<section anchor="additional-context-in-a-response"><name>Additional Context in a Response</name>
<t>In addition to a <spanx style="verb">"decision"</spanx>, a response may contain a <spanx style="verb">"context"</spanx> field which can be any JSON object.  This context can convey additional information that can be used by the PEP as part of the decision evaluation process. Examples include:</t>

<t><list style="symbols">
  <t>XACML's notion of "advice" and "obligations"</t>
  <t>Hints for rendering UI state</t>
  <t>Instructions for step-up authentication</t>
</list></t>

</section>
<section anchor="example-context"><name>Example Context</name>
<t>An implementation MAY follow a structured approach to <spanx style="verb">"context"</spanx>, in which it presents the reasons that an authorization request failed.</t>

<t><list style="symbols">
  <t>A list of identifiers representing the items (policies, graph nodes, tuples) that were used in the decision-making process.</t>
  <t>A list of reasons as to why access is permitted or denied.</t>
</list></t>

<section anchor="reasons"><name>Reasons</name>
<t>Reasons MAY be provided by the PDP.</t>

<section anchor="reason-field"><name>Reason Field</name>
<t>A Reason Field is a JSON object that has keys and values of type <spanx style="verb">string</spanx>. The following are non-normative examples of Reason Field objects:</t>

<figure title="Example Reason" anchor="reason-example"><sourcecode type="json"><![CDATA[
{
  "en": "location restriction violation"
}
]]></sourcecode></figure>

</section>
<section anchor="reason-object"><name>Reason Object</name>
<t>A Reason Object specifies a particular reason. It is a JSON object that has the following fields:</t>

<dl>
  <dt><spanx style="verb">id</spanx>:</dt>
  <dd>
    <t>REQUIRED. A string value that specifies the reason within the scope of a particular response.</t>
  </dd>
  <dt><spanx style="verb">reason_admin</spanx>:</dt>
  <dd>
    <t>OPTIONAL. The reason, which MUST NOT be shared with the user, but useful for administrative purposes that indicates why the access was denied. The value of this field is a Reason Field object (<xref target="reason-field"/>).</t>
  </dd>
  <dt><spanx style="verb">reason_user</spanx>:</dt>
  <dd>
    <t>OPTIONAL. The reason, which MAY be shared with the user that indicates why the access was denied. The value of this field is a Reason Field object (<xref target="reason-field"/>).</t>
  </dd>
</dl>

<t>The following is a non-normative example of a Reason Object:</t>

<figure title="Example of a Reason Object" anchor="example-reason-object"><sourcecode type="json"><![CDATA[
{
  "id": "0",
  "reason_admin": {
    "en": "Request failed policy C076E82F"
  },
  "reason_user": {
    "en-403": "Insufficient privileges. Contact your administrator",
    "es-403": "Privilegios insuficientes. PÃ³ngase en contacto con su administrador"
  }
}
]]></sourcecode></figure>

</section>
</section>
</section>
<section anchor="sample-response-with-additional-context-non-normative"><name>Sample Response with additional context (non-normative)</name>

<figure title="Example Response with Context" anchor="response-with-context-example"><sourcecode type="json"><![CDATA[
{
  "decision": true,
  "context": {
    "id": "0",
    "reason_admin": {
      "en": "Request failed policy C076E82F"
    },
    "reason_user": {
      "en-403": "Insufficient privileges. Contact your administrator",
      "es-403": "Privilegios insuficientes. PÃ³ngase en contacto con su administrador"
    }
  }
}
]]></sourcecode></figure>

</section>
</section>
</section>
<section anchor="access-evaluations-api"><name>Access Evaluations API</name>

<t>The Access Evaluations API defines the message exchange pattern between a client (PEP) and an authorization service (PDP) for evaluating multiple access evaluations within the scope of a single message exchange (also known as "boxcarring" requests).</t>

<section anchor="access-evaluations-request"><name>The Access Evaluations API Request</name>

<t>The Access Evaluation API Request builds on the information model presented in <xref target="information-model"/> and the 4-tuple defined in the Access Evaluation Request (<xref target="access-evaluation-request"/>).</t>

<t>To send multiple access evaluation requests in a single message, the caller MAY add an <spanx style="verb">evaluations</spanx> key to the request. The <spanx style="verb">evaluations</spanx> key is an array which contains a list of JSON objects, each typed as a 4-tuple, and specifying a discrete request.</t>

<t>If an <spanx style="verb">evaluations</spanx> array is NOT present, the Access Evaluations Request behaves in a backwards-compatible manner with the (single) Access Evaluation API Request (<xref target="access-evaluation-request"/>).</t>

<t>If an <spanx style="verb">evaluations</spanx> array IS present and contains one or more objects, these form distinct requests that the PDP will evaluate. These requests are independent from each other, and may be executed sequentially or in parallel, left to the discretion of each implementation.</t>

<t>If the <spanx style="verb">evaluations</spanx> array IS present and contains one or more objects, the top-level <spanx style="verb">subject</spanx>, <spanx style="verb">action</spanx>, <spanx style="verb">resource</spanx>, and <spanx style="verb">context</spanx> keys (4-tuple) in the request object MAY be omitted. However, if one or more of these values is present, they provide default values for their respective fields in the evaluation requests. This behavior is described in <xref target="default-values"/>.</t>

<t>The following is a non-normative example for specifying three requests, with no default values:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "evaluations": [
    {
      "subject": {
        "type": "user",
        "id": "alice@acmecorp.com"
      },
      "action": {
        "name": "can_read"
      },
      "resource": {
        "type": "document",
        "id": "boxcarring.md"
      },
      "context":{
        "time": "2024-05-31T15:22-07:00"
      }
    },
    {
      "subject": {
        "type": "user",
        "id": "alice@acmecorp.com"
      },
      "action": {
        "name": "can_read"
      },
      "resource": {
        "type": "document",
        "id": "subject-search.md"
      },
      "context":{
        "time": "2024-05-31T15:22-07:00"
      }
    },
    {
      "subject": {
        "type": "user",
        "id": "alice@acmecorp.com"
      },
      "action": {
        "name": "can_read"
      },
      "resource": {
        "type": "document",
        "id": "resource-search.md"
      },
      "context":{
        "time": "2024-05-31T15:22-07:00"
      }
    }
  ]
}
]]></sourcecode></figure>

<section anchor="default-values"><name>Default values</name>

<t>While the example above provides the most flexibility in specifying distinct values in each request for every evaluation, it is common for boxcarred requests to share one or more values of the 4-tuple. For example, evaluations MAY all refer to a single subject, and/or have the same contextual (environmental) attributes.</t>

<t>Default values offer a more compact syntax that avoids over-duplication of request data.</t>

<t>If any of the top-level <spanx style="verb">subject</spanx>, <spanx style="verb">action</spanx>, <spanx style="verb">resource</spanx>, and <spanx style="verb">context</spanx> keys are provided, they are treated as default values for the 4-tuples specified in the <spanx style="verb">evaluations</spanx> object. Any values specified in the 4-tuples present in the <spanx style="verb">evaluations</spanx> object take precedence over these default values.</t>

<t>The following is a non-normative example for specifying three requests that refer to a single subject and context:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "subject": {
    "type": "user",
    "id": "alice@acmecorp.com"
  },
  "context":{
    "time": "2024-05-31T15:22-07:00"
  },
  "evaluations": [
    {
      "action": {
        "name": "can_read"
      },
      "resource": {
        "type": "document",
        "id": "boxcarring.md"
      }
    },
    {
      "action": {
        "name": "can_read"
      },
      "resource": {
        "type": "document",
        "id": "subject-search.md"
      }
    },
    {
      "action": {
        "name": "can_read"
      },
      "resource": {
        "type": "document",
        "id": "resource-search.md"
      }
    }
  ]
}
]]></sourcecode></figure>

<t>The following is a non-normative example for specifying three requests that refer to a single <spanx style="verb">subject</spanx> and <spanx style="verb">context</spanx>, with a default value for <spanx style="verb">action</spanx>, that is overridden by the third request:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "subject": {
    "type": "user",
    "id": "alice@acmecorp.com"
  },
  "context":{
    "time": "2024-05-31T15:22-07:00"
  },
  "action": {
    "name": "can_read"
  },
  "evaluations": [
    {
      "resource": {
        "type": "document",
        "id": "boxcarring.md"
      }
    },
    {
      "resource": {
        "type": "document",
        "id": "subject-search.md"
      }
    },
    {
      "action": {
        "name": "can_edit"
      },
      "resource": {
        "type": "document",
        "id": "resource-search.md"
      }
    }
  ]
}
]]></sourcecode></figure>

</section>
<section anchor="evaluations-options"><name>Evaluations options</name>

<t>The <spanx style="verb">evaluations</spanx> request payload includes an OPTIONAL <spanx style="verb">options</spanx> key, with a JSON value containing a set of key-value pairs.</t>

<t>This provides a general-purpose mechanism for providing caller-supplied metadata on how the request is to be executed.</t>

<t>One such option conrtols <em>evaluation semantics</em>, and is described in <xref target="evaluations-semantics"/>.</t>

<t>A non-normative example of the <spanx style="verb">options</spanx> field is shown below:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "evaluations": [...],
  "options": {
    "evaluation_semantics": "execute_all",
    "another_option": "value"
  }
}
]]></sourcecode></figure>

<section anchor="evaluations-semantics"><name>Evaluations semantics</name>

<t>By default, every request in the <spanx style="verb">evaluations</spanx> array is executed and a response returned in the same array order. This is the most common use-case for boxcarring multiple evaluation requests in a single payload.</t>

<t>With that said, three evaluation semantics are supported:</t>

<t><list style="numbers" type="1">
  <t><em>Execute all of the requests (potentially in parallel), return all of the results.</em> Any failure can be denoted by <spanx style="verb">decision: false</spanx> and MAY provide a reason code in the context.</t>
  <t><em>Deny on first denial (or failure).</em> This semantic could be desired if a PEP wants to issue a few requests in a particular order, with any denial (error, or <spanx style="verb">decision: false</spanx>) "short-circuiting" the evaluations call and returning on the first denial. This essentially works like the <spanx style="verb">&amp;&amp;</spanx> operator in programming languages.</t>
  <t><em>Permit on first permit.</em> This is the converse "short-circuiting" semantic, working like the <spanx style="verb">||</spanx> operator in programming languages.</t>
</list></t>

<t>To select the desired evaluations semantic, a caller can pass in <spanx style="verb">options.evaluations_semantic</spanx> with exactly one of the following values:</t>

<t><list style="symbols">
  <t><spanx style="verb">execute_all</spanx></t>
  <t><spanx style="verb">deny_on_first_deny</spanx></t>
  <t><spanx style="verb">permit_on_first_permit</spanx></t>
</list></t>

<t><spanx style="verb">execute_all</spanx> is the default semantic, so an <spanx style="verb">evaluations</spanx> request without the <spanx style="verb">options.evaluations_semantic</spanx> flag will execute using this semantic.</t>

<section anchor="example-evaluate-read-action-for-three-documents-using-all-three-semantics"><name>Example: Evaluate <spanx style="verb">read</spanx> action for three documents using all three semantics</name>

<t>Execute all requests:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "subject": {
    "type": "user",
    "id": "alice@example.com"
  },
  "action": {
    "name": "read"
  },
  "options": {
    "evaluations_semantic": "execute_all"
  },
  "evaluations": [
    {
      "resource": {
        "type": "document",
        "id": "1"
      }
    },
    {
      "resource": {
        "type": "document",
        "id": "2"
      }
    },
    {
      "resource": {
        "type": "document",
        "id": "3"
      }
    }
  ]
}
]]></sourcecode></figure>

<t>Response:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "evaluations": [
    {
      decision: true
    },
    {
      decision: false
    },
    {
      decision: true
    }
  ]
}
]]></sourcecode></figure>

<t>Deny on first deny:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "subject": {
    "type": "user",
    "id": "alice@example.com"
  },
  "action": {
    "name": "read"
  },
  "options": {
    "evaluations_semantic": "deny_on_first_deny"
  },
  "evaluations": [
    {
      "resource": {
        "type": "document",
        "id": "1"
      }
    },
    {
      "resource": {
        "type": "document",
        "id": "2"
      }
    },
    {
      "resource": {
        "type": "document",
        "id": "3"
      }
    }
  ]
}
]]></sourcecode></figure>

<t>Response:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "evaluations": [
    {
      decision: true
    },
    {
      decision: false,
      context: {
        "id": "200",
        "reason": "deny_on_first_deny"
      }
    }
  ]
}
]]></sourcecode></figure>

<t>Permit on first permit:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "subject": {
    "type": "user",
    "id": "alice@example.com"
  },
  "action": {
    "name": "read"
  },
  "options": {
    "evaluations_semantic": "permit_on_first_permit"
  },
  "evaluations": [
    {
      "resource": {
        "type": "document",
        "id": "1"
      },
    },
    {
      "resource": {
        "type": "document",
        "id": "2"
      }
    },
    {
      "resource": {
        "type": "document",
        "id": "3"
      }
    }
  ]
}
]]></sourcecode></figure>

<t>Response:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "evaluations": [
    {
      decision: true
    }
  ]
}
]]></sourcecode></figure>

</section>
</section>
</section>
</section>
<section anchor="access-evaluations-response"><name>Access Evaluations API Response</name>

<t>Like the request format, the Access Evaluations Response format for an Access Evaluations Request adds an <spanx style="verb">evaluations</spanx> array that lists the decisions in the same order they were provided in the <spanx style="verb">evaluations</spanx> array in the request. Each value of the evaluations array is typed as an Access Evaluation Response (<xref target="access-evaluation-response"/>).</t>

<t>In case the <spanx style="verb">evaluations</spanx> array is present, it is RECOMMENDED that the <spanx style="verb">decision</spanx> key of the response will be omitted. If present, it can be ignored by the caller.</t>

<t>The following is a non-normative example of a Access Evaluations Response to an Access Evaluations Request containing three evaluation objects:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "evaluations": [
    {
      "decision": true
    },
    {
      "decision": false,
      "context": {
        "reason": "resource not found"
      }
    },
    {
      "decision": false,
      "context": {
        "reason": "Subject is a viewer of the resource"
      }
    }
  ]
}
]]></sourcecode></figure>

<section anchor="errors"><name>Errors</name>

<t>There are two types of errors, and they are handled differently:
1. Transport-level errors, or errors that pertain to the entire payload.
2. Errors in individual evaluations.</t>

<t>The first type of error is handled at the transport level. For example, for the HTTP binding, the 4XX and 5XX codes indicate a general error that pertains to the entire payload, as described in Transport (<xref target="transport"/>).</t>

<t>The second type of error is handled at the payload level. Decisions default to <em>closed</em> (i.e. <spanx style="verb">false</spanx>), but the <spanx style="verb">context</spanx> field can include errors that are specific to that request.</t>

<t>The following is a non-normative example of a response to an Access Evaluations Request containing three evaluation objects, two of them demonstrating how errors can be returned for two of the evaluation requests:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "evaluations": [
    {
      "decision": true
    },
    {
      "decision": false,
      "context": {
        "error": {
          "status": 404,
          "message": "Resource not found"
        }
      }
    },
    {
      "decision": false,
      "context": {
        "reason": "Subject is a viewer of the resource"
      }
    }
  ]
}
]]></sourcecode></figure>

</section>
</section>
</section>
<section anchor="transport"><name>Transport</name>

<t>This specification defines an HTTPS binding which MUST be implemented by a compliant PDP.</t>

<t>Additional transport bindings (e.g. gRPC) MAY be defined in the future in the form of profiles, and MAY be implemented by a PDP.</t>

<section anchor="https-binding"><name>HTTPS Binding</name>

<section anchor="https-access-evaluation-request"><name>HTTPS Access Evaluation Request</name>
<t>The Access Evaluation Request is an HTTPS request with <spanx style="verb">content-type</spanx> of <spanx style="verb">application/json</spanx>. Its body is a JSON object that contains the Access Evaluation Request, as defined in <xref target="access-evaluation-request"/>.</t>

<t>The following is a non-normative example of the HTTPS binding of the Access Evaluation Request:</t>

<figure title="Example of an HTTPS Access Evaluation Request" anchor="example-access-evaluation-request"><sourcecode type="http"><![CDATA[
POST /access/v1/evaluation HTTP/1.1
Host: pdp.mycompany.com
Authorization: Bearer <myoauthtoken>
X-Request-ID: bfe9eb29-ab87-4ca3-be83-a1d5d8305716

{
  "subject": {
    "type": "user",
    "id": "alice@acmecorp.com"
  },
  "resource": {
    "type": "todo",
    "id": "1",
  },
  "action": {
    "name": "can_read"
  },
  "context": {
    "time": "1985-10-26T01:22-07:00"
  }
}
]]></sourcecode></figure>

</section>
<section anchor="access-evaluation-https-response"><name>Access Evaluation HTTPS Response</name>
<t>The success response to an Access Evaluation Request is an Access Evaluation Response. It is an HTTPS response with a <spanx style="verb">status</spanx> code of <spanx style="verb">200</spanx>, and <spanx style="verb">content-type</spanx> of <spanx style="verb">application/json</spanx>. Its body is a JSON object that contains the Access Evaluation Response, as defined in <xref target="access-evaluation-response"/>.</t>

<t>Following is a non-normative example of an HTTPS Access Evaluation Response:</t>

<figure title="Example of an HTTP Access Evaluation Response" anchor="example-access-evaluation-response"><sourcecode type="http"><![CDATA[
HTTP/1.1 OK
Content-type: application/json
X-Request-ID: bfe9eb29-ab87-4ca3-be83-a1d5d8305716

{
  "decision": true
}
]]></sourcecode></figure>

</section>
<section anchor="access-evaluations-https-request"><name>Access Evaluations HTTPS Request</name>
<t>The Access Evaluations Request is an HTTPS request with <spanx style="verb">content-type</spanx> of <spanx style="verb">application/json</spanx>. Its body is a JSON object that contains the Access Evaluations Request, as defined in <xref target="access-evaluations-request"/>.</t>

<t>The following is a non-normative example of a the HTTPS binding of the Access Evaluations Request:</t>

<figure title="Example of an HTTPS Access Evaluations Request" anchor="example-access-evaluations-request"><sourcecode type="http"><![CDATA[
POST /access/v1/evaluations HTTP/1.1
Host: pdp.mycompany.com
Authorization: Bearer <myoauthtoken>
X-Request-ID: bfe9eb29-ab87-4ca3-be83-a1d5d8305716

{
  "subject": {
    "type": "user",
    "id": "alice@acmecorp.com"
  },
  "context":{
    "time": "2024-05-31T15:22-07:00"
  },
  "action": {
    "name": "can_read"
  },
  "evaluations": [
    {
      "resource": {
        "type": "document",
        "id": "boxcarring.md"
      }
    },
    {
      "resource": {
        "type": "document",
        "id": "subject-search.md"
      }
    },
    {
      "action": {
        "name": "can_edit"
      },
      "resource": {
        "type": "document",
        "id": "resource-search.md"
      }
    }
  ]
}
]]></sourcecode></figure>

</section>
<section anchor="https-access-evaluations-response"><name>HTTPS Access Evaluations Response</name>
<t>The success response to an Access Evaluations Request is an Access Evaluations Response. It is a HTTPS response with a <spanx style="verb">status</spanx> code of <spanx style="verb">200</spanx>, and <spanx style="verb">content-type</spanx> of <spanx style="verb">application/json</spanx>. Its body is a JSON object that contains the Access Evaluations Response, as defined in <xref target="access-evaluations-response"/>.</t>

<t>Following is a non-normative example of an HTTPS Access Evaluations Response:</t>

<figure title="Example of an HTTPS Access Evaluations Response" anchor="example-access-evaluations-response"><sourcecode type="http"><![CDATA[
HTTP/1.1 OK
Content-type: application/json
X-Request-ID: bfe9eb29-ab87-4ca3-be83-a1d5d8305716

{
  "evaluations": [
    {
      "decision": true
    },
    {
      "decision": false,
      "context": {
        "error": {
          "status": 404,
          "message": "Resource not found"
        }
      }
    },
    {
      "decision": false,
      "context": {
        "reason": "Subject is a viewer of the resource"
      }
    }
  ]
}
]]></sourcecode></figure>

</section>
<section anchor="error-responses"><name>Error Responses</name>
<t>The following error responses are common to all methods of the Authorization API. The error response is indicated by an HTTPS status code (<xref section="15" sectionFormat="of" target="RFC9110"/>) that indicates error.</t>

<t>The following errors are indicated by the status codes defined below:</t>

<texttable title="HTTPS Error status codes" anchor="_table-error-status-codes">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <ttcol align='left'>HTTPS Body Content</ttcol>
      <c>400</c>
      <c>Bad Request</c>
      <c>An error message string</c>
      <c>401</c>
      <c>Unauthorized</c>
      <c>An error message string</c>
      <c>403</c>
      <c>Forbidden</c>
      <c>An error message string</c>
      <c>500</c>
      <c>Internal error</c>
      <c>An error message string</c>
</texttable>

<t>Note: HTTPS errors are returned by the PDP to indicate an error condition relating to the request or its processing, and are unrelated to the outcome of an authorization decision, which is always returned with a <spanx style="verb">200</spanx> status code and a response payload.</t>

<t>To make this concrete:</t>

<t><list style="symbols">
  <t>a <spanx style="verb">401</spanx> HTTPS status code indicates that the caller (policy enforcement point) did not properly authenticate to the PDP - for example, by omitting a required <spanx style="verb">Authorization</spanx> header, or using an invalid access token.</t>
  <t>the PDP indicates to the caller that the authorization request is denied by sending a response with a <spanx style="verb">200</spanx> HTTPS status code, along with a payload of <spanx style="verb">{ "decision": false }</spanx>.</t>
</list></t>

</section>
<section anchor="request-identification"><name>Request Identification</name>
<t>All requests to the API MAY have request identifiers to uniquely identify them. The API client (PEP) is responsible for generating the request identifier. If present, the request identifier SHALL be provided using the HTTPS Header <spanx style="verb">X-Request-ID</spanx>. The value of this header is an arbitrary string. The following non-normative example describes this header:</t>

<figure title="Example HTTPS request with a Request Id Header" anchor="request-id-example"><sourcecode type="http"><![CDATA[
POST /access/v1/evaluation HTTP/1.1
Authorization: Bearer mF_9.B5f-4.1JqM
X-Request-ID: bfe9eb29-ab87-4ca3-be83-a1d5d8305716
]]></sourcecode></figure>

</section>
<section anchor="request-identification-in-a-response"><name>Request Identification in a Response</name>
<t>A PDP responding to an Authorization API request that contains an <spanx style="verb">X-Request-ID</spanx> header MUST include a request identifier in the response. The request identifier is specified in the HTTPS Response header: <spanx style="verb">X-Request-ID</spanx>. If the PEP specified a request identifier in the request, the PDP MUST include the same identifier in the response to that request.</t>

<t>The following is a non-normative example of an HTTPS Response with this header:</t>

<figure title="Example HTTPS response with a Request Id Header" anchor="example-response-request-id"><sourcecode type="http"><![CDATA[
HTTP/1.1 OK
Content-type: application/json
X-Request-ID: bfe9eb29-ab87-4ca3-be83-a1d5d8305716
]]></sourcecode></figure>

</section>
</section>
</section>
<section anchor="IANA"><name>IANA Considerations</name>

<t>This specification does not introduce any new identifiers that would require registration with IANA.</t>

</section>
<section anchor="Security"><name>Security Considerations</name>

<section anchor="communication-integrity-and-confidentiality"><name>Communication Integrity and Confidentiality</name>

<t>In the ABAC architecture, the PEP-PDP connection is the most sensitive one and needs to be secured to guarantee:</t>

<t><list style="symbols">
  <t>Integrity</t>
  <t>Confidentiality</t>
</list></t>

<t>As a result, the connection between the PEP and the PDP MUST be secured using the most adequate means given the choice of transport (e.g. TLS for HTTP REST).</t>

</section>
<section anchor="policy-confidentiality-and-sender-authentication"><name>Policy Confidentiality and Sender Authentication</name>

<t>Additionally, the PDP SHOULD authenticate the calling PEP. There are several ways authentication can be established. These ways are out of scope of this specification. They MAY include:</t>

<t><list style="symbols">
  <t>Mutual TLS</t>
  <t>OAuth-based authentication</t>
  <t>API key</t>
</list></t>

<t>The choice and strength of either mechanism is not in scope.</t>

<t>Authenticating the PEP allows the PDP to avoid common attacks (such as DoS - see below) and/or reveal its internal policies. A malicious actor could craft a large number of requests to try and understand what policies the PDP is configured with. Requesting a client (PEP) be authenticated mitigates that risk.</t>

</section>
<section anchor="trust"><name>Trust</name>

<t>In ABAC, there is occasionally conversations around the trust between PEP and PDP: how can the PDP trust the PEP to send the right values in? This is a misplaced concern. The PDP must trust the PEP as ultimately, the PEP is the one responsible for enforcing the decision the PDP produces.</t>

</section>
<section anchor="availability-denial-of-service"><name>Availability &amp; Denial of Service</name>

<t>The PDP SHOULD apply reasonable protections to avoid common attacks tied to request payload size, the number of requests, invalid JSON, nested JSON attacks, or memory consumption. Rate limiting is one such way to address such issues.</t>

</section>
</section>


  </middle>

  <back>



    <references title='Normative References' anchor="sec-normative-references">





<reference anchor="RFC4001">
<front>
<title>Textual Conventions for Internet Network Addresses</title>
<author fullname="M. Daniele" initials="M." surname="Daniele"><organization/></author>
<author fullname="B. Haberman" initials="B." surname="Haberman"><organization/></author>
<author fullname="S. Routhier" initials="S." surname="Routhier"><organization/></author>
<author fullname="J. Schoenwaelder" initials="J." surname="Schoenwaelder"><organization/></author>
<date month="February" year="2005"/>
<abstract><t>This MIB module defines textual conventions to represent commonly used Internet network layer addressing information.  The intent is that these textual conventions will be imported and used in MIB modules that would otherwise define their own representations.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="4001"/>
<seriesInfo name="DOI" value="10.17487/RFC4001"/>
</reference>



<reference anchor="RFC6749">
<front>
<title>The OAuth 2.0 Authorization Framework</title>
<author fullname="D. Hardt" initials="D." role="editor" surname="Hardt"><organization/></author>
<date month="October" year="2012"/>
<abstract><t>The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf.  This specification replaces and obsoletes the OAuth 1.0 protocol described in RFC 5849.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="6749"/>
<seriesInfo name="DOI" value="10.17487/RFC6749"/>
</reference>



<reference anchor="RFC8259">
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author fullname="T. Bray" initials="T." role="editor" surname="Bray"><organization/></author>
<date month="December" year="2017"/>
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name="STD" value="90"/>
<seriesInfo name="RFC" value="8259"/>
<seriesInfo name="DOI" value="10.17487/RFC8259"/>
</reference>



<reference anchor="RFC9110">
<front>
<title>HTTP Semantics</title>
<author fullname="R. Fielding" initials="R." role="editor" surname="Fielding"><organization/></author>
<author fullname="M. Nottingham" initials="M." role="editor" surname="Nottingham"><organization/></author>
<author fullname="J. Reschke" initials="J." role="editor" surname="Reschke"><organization/></author>
<date month="June" year="2022"/>
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes. </t><t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t></abstract>
</front>
<seriesInfo name="STD" value="97"/>
<seriesInfo name="RFC" value="9110"/>
<seriesInfo name="DOI" value="10.17487/RFC9110"/>
</reference>

<reference anchor="RFC9493">
  <front>
    <title>Subject Identifiers for Security Event Tokens</title>
    <author fullname="A. Backman" initials="A." role="editor" surname="Backman"/>
    <author fullname="M. Scurtescu" initials="M." surname="Scurtescu"/>
    <author fullname="P. Jain" initials="P." surname="Jain"/>
    <date month="December" year="2023"/>
    <abstract>
      <t>Security events communicated within Security Event Tokens may support a variety of identifiers to identify subjects related to the event. This specification formalizes the notion of Subject Identifiers as structured information that describes a subject and named formats that define the syntax and semantics for encoding Subject Identifiers as JSON objects. It also establishes a registry for defining and allocating names for such formats as well as the JSON Web Token (JWT) "sub_id" Claim.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9493"/>
  <seriesInfo name="DOI" value="10.17487/RFC9493"/>
</reference>


<reference anchor="XACML" target="https://www.oasis-open.org/committees/xacml/repository/cs-xacml-specification-1.1.pdf">
  <front>
    <title>eXtensible Access Control Markup Language (XACML) Version 1.1</title>
    <author initials="S." surname="Godik" fullname="Simon Godik" role="editor">
      <organization>Overxeer</organization>
    </author>
    <author initials="T. M." surname="(Ed.)" fullname="Tim Moses (Ed.)" role="editor">
      <organization>Entrust</organization>
    </author>
    <date year="2006"/>
  </front>
</reference>


    </references>




<?line 1034?>

<section anchor="terminology"><name>Terminology</name>
<dl>
  <dt>Subject:</dt>
  <dd>
    <t>The user or robotic principal about whom the Authorization API call is being made.</t>
  </dd>
  <dt>Resource:</dt>
  <dd>
    <t>The target of the request; the resource about which the Authorization API is being made.</t>
  </dd>
  <dt>Action:</dt>
  <dd>
    <t>The operation the Subject has attempted on the Resource in an Authorization API call.</t>
  </dd>
  <dt>Context:</dt>
  <dd>
    <t>The environmental or contextual attributes for this request.</t>
  </dd>
  <dt>Decision:</dt>
  <dd>
    <t>The value of the evaluation decision made by the PDP: <spanx style="verb">true</spanx> for "allow", <spanx style="verb">false</spanx> for "deny".</t>
  </dd>
  <dt>PDP:</dt>
  <dd>
    <t>Policy Decision Point. The component or system that provides authorization decisions over the network interface defined here as the Authorization API.</t>
  </dd>
  <dt>PEP:</dt>
  <dd>
    <t>Policy Enforcement Point. The component or system that requests decisions from the PDP and enforces access to specific requests based on the decisions obtained from the PDP.</t>
  </dd>
</dl>

</section>
<section anchor="Acknowledgements"><name>Acknowledgements</name>

<t>This template uses extracts from templates written by
<contact fullname="Pekka Savola"/>, <contact fullname="Elwyn Davies"/> and
<contact fullname="Henrik Levkowetz"/>.</t>

</section>
<section anchor="document-history"><name>Document History</name>

<t>[[ To be removed from the final specification ]]</t>

<t><list style="symbols">
  <t>00 - Initial version.</t>
  <t>01 - Refactored the optional fields of Subject, Action, and Resource into a <spanx style="verb">properties</spanx> sub-object, making it easier to design meaningful JSON-schema and protobuf contracts for the API. Also changed the <spanx style="verb">evaluations</spanx> field from an object to an array, to preserve ordering semantics.</t>
  <t>02 - Added the evaluations API.</t>
</list></t>

</section>
<section anchor="Notices"><name>Notices</name>
<t>Copyright (c) 2025 The OpenID Foundation.</t>

<t>The OpenID Foundation (OIDF) grants to any Contributor, developer, implementer,
or other interested party a non-exclusive, royalty free, worldwide copyright license to
reproduce, prepare derivative works from, distribute, perform and display, this
Implementers Draft, Final Specification, or Final Specification Incorporating Errata
Corrections solely for the purposes of (i) developing specifications, and (ii)
implementing Implementers Drafts, Final Specifications, and Final Specification
Incorporating Errata Corrections based on such documents, provided that attribution
be made to the OIDF as the source of the material, but that such attribution does not
indicate an endorsement by the OIDF.</t>

<t>The technology described in this specification was made available from contributions
from various sources, including members of the OpenID Foundation and others.
Although the OpenID Foundation has taken steps to help ensure that the technology
is available for distribution, it takes no position regarding the validity or scope of any
intellectual property or other rights that might be claimed to pertain to the
implementation or use of the technology described in this specification or the extent
to which any license under such rights might or might not be available; neither does it
represent that it has made any independent effort to identify any such rights. The
OpenID Foundation and the contributors to this specification make no (and hereby
expressly disclaim any) warranties (express, implied, or otherwise), including implied
warranties of merchantability, non-infringement, fitness for a particular purpose, or
title, related to this specification, and the entire risk as to implementing this
specification is assumed by the implementer. The OpenID Intellectual Property
Rights policy (found at openid.net) requires contributors to offer a patent promise not
to assert certain patent claims against other contributors and against implementers.
OpenID invites any interested party to bring to its attention any copyrights, patents,
patent applications, or other proprietary rights that may cover technology that may be
required to practice this specification.</t>

</section>

    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
        <name>Contributors</name>
    <contact initials="M." surname="Jordan" fullname="Marc Jordan">
      <organization>SGNL</organization>
      <address>
        <email>marc@sgnl.ai</email>
      </address>
    </contact>
    <contact initials="E." surname="Gustavson" fullname="Erik Gustavson">
      <organization>SGNL</organization>
      <address>
        <email>erik@sgnl.ai</email>
      </address>
    </contact>
    <contact initials="A." surname="Babeanu" fullname="Alex Babeanu">
      <organization>3Edges</organization>
      <address>
        <email>alex@3edges.com</email>
      </address>
    </contact>
    </section>

  </back>

<!-- ##markdown-source:
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
AA==

-->

</rfc>

